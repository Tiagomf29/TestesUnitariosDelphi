unit UTestesCalculadora;

interface

uses
  DUnitX.TestFramework,UFuncaoCalculadora,Vcl.Dialogs;

type
  [TestFixture]
  TMyTestObject = class
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;
    // Sample Methods
    // Simple single Test
    [Test]
    procedure Test1;
    // Test with TestCase Attribute to supply parameters.
    [Test]
    [TestCase('TestA','10,2')]
    procedure TesteSomaCalculadora (Avalor1, AValor2 : Integer);
    [TestCase('TestA','10,2')]
    procedure TesteSubtraiCalculadora (Avalor1, AValor2 : Integer);
    [TestCase('TestA','10,2')]
    procedure TesteMultiplicaCalculadora (Avalor1, AValor2 : Integer);
    [TestCase('TestA','10,2')]
    procedure TesteDivideCalculadora (Avalor1, AValor2 : Integer);

  end;

implementation

procedure TMyTestObject.Setup;
begin

end;

procedure TMyTestObject.TearDown;
begin

end;

procedure TMyTestObject.Test1;
begin
end;

procedure TMyTestObject.TesteDivideCalculadora(Avalor1, AValor2: Integer);
var
  resultado : Double;
begin

  resultado := Avalor1 / Avalor2;
  Assert.IsTrue(resultado = 5, 'Calculo está incorreto!');

end;

procedure TMyTestObject.TesteMultiplicaCalculadora(Avalor1, AValor2: Integer);
var
  resultado : Double;
begin

  resultado := Avalor1 * Avalor2;
  Assert.IsTrue(resultado = 20, 'Calculo está incorreto!');

end;

procedure TMyTestObject.TesteSomaCalculadora(Avalor1, AValor2: Integer);
var
  resultado : Double;
begin

  resultado := Avalor1 + Avalor2;
  Assert.IsTrue(resultado = 12, 'Calculo está incorreto!');

end;

procedure TMyTestObject.TesteSubtraiCalculadora(Avalor1, AValor2: Integer);
var
  resultado : Double;
begin

  resultado := Avalor1 - Avalor2;
  Assert.IsTrue(resultado = 8, 'Calculo está incorreto!');

end;

initialization
  TDUnitX.RegisterTestFixture(TMyTestObject);
end.
